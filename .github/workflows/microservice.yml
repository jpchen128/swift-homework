name: MicroService

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install swift
      run: |
        wget https://download.swift.org/swift-5.10.1-release/ubuntu2204/swift-5.10.1-RELEASE/swift-5.10.1-RELEASE-ubuntu22.04.tar.gz
        tar -xvzf swift-5.10.1-RELEASE-ubuntu22.04.tar.gz
        export PATH=$PATH:$(pwd)/swift-5.10.1-RELEASE-ubuntu22.04/usr/bin

    - name: Resolve Swift package dependencies
      run: swift package resolve
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          swift-5.10.1-RELEASE-ubuntu22.04/
          .build/
        key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-

    - name: Build Microservice
      run: swift build -c release --static-swift-stdlib

    - name: Run tests
      run: swift test -c release

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        mask-aws-account-id: no

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        ECR_REPOSITORY: test-repo
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EKS
      run: |
        kubectl set image deployment/your-deployment-name your-container=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
